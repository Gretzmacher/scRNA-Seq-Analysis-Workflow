#-----------------------------------------------------------------
#------------------Libraries and Fig Parameters-------------------
#-----------------------------------------------------------------
import numpy as np
import scanpy as sc
import anndata as ad
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import median_abs_deviation

import os
import scipy.sparse as sp
from numba.core.typing.builtins import Print, PrintItem
from scipy.sparse import issparse
from scipy.sparse import csr_matrix, csc_matrix, coo_matrix
import scanpy.external as sce
import anndata2ri
import logging

import rpy2.rinterface_lib.callbacks as rcb
import rpy2.robjects as ro
from rpy2.robjects import pandas2ri
from rpy2.robjects.packages import importr
from rpy2.robjects import r
import rpy2.robjects.numpy2ri
from six import print_
import h5py
import scipy


print("Libraries imported successfully.")
rcb.logger.setLevel(logging.ERROR)

sc.settings.verbosity = 0
sc.settings.set_figure_params(dpi=50, facecolor="white", frameon=False) #Dots per inch: Resolution of Plot !300or more is publication quality

#-----------------------------------------------------------------
#-----------------------Loading All Files-------------------------
#-----------------------------------------------------------------
matrix_files = [
    # r"D:\UKW\DataSets\phs002371.v6.p1\1\Normal\HTA8_6001_001101_cellbender.h5",
    #r"D:\UKW\DataSets\phs002371.v6.p1\1\Normal\HTA8_6001_001101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\2\Normal\HTA8_6002_001101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\3\Normal\HTA8_6009_001101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\4\Normal\HTA8_6011_001101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\5\Normal\HTA8_6013_001101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\6\Normal\HTA8_6016_001101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\7\Normal\HTA8_6023_001101_counts.mtx",
    #
    #r"D:\UKW\DataSets\phs002371.v6.p1\1\Tumour\HTA8_6001_002101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\2\Tumour\HTA8_6002_002101_counts.mtx",
    r"D:\UKW\DataSets\phs002371.v6.p1\3\Tumour\HTA8_6009_002101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\4\Tumour\HTA8_6011_002101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\5\Tumour\HTA8_6013_002101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\6\Tumour\HTA8_6016_002101_counts.mtx",
    #r"D:\UKW\DataSets\phs002371.v6.p1\7\Tumour\HTA8_6023_002101_counts.mtx",
]
genes_files = [
    #r"D:\UKW\DataSets\phs002371.v6.p1\1\Normal\HTA8_6001_001101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\2\Normal\HTA8_6002_001101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\3\Normal\HTA8_6009_001101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\4\Normal\HTA8_6011_001101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\5\Normal\HTA8_6013_001101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\6\Normal\HTA8_6016_001101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\7\Normal\HTA8_6023_001101_genes.csv",
    #
    #r"D:\UKW\DataSets\phs002371.v6.p1\1\Tumour\HTA8_6001_002101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\2\Tumour\HTA8_6002_002101_genes.csv",
    r"D:\UKW\DataSets\phs002371.v6.p1\3\Tumour\HTA8_6009_002101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\4\Tumour\HTA8_6011_002101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\5\Tumour\HTA8_6013_002101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\6\Tumour\HTA8_6016_002101_genes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\7\Tumour\HTA8_6023_002101_genes.csv",
]
barcodes_files = [
    #r"D:\UKW\DataSets\phs002371.v6.p1\1\Normal\HTA8_6001_001101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\2\Normal\HTA8_6002_001101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\3\Normal\HTA8_6009_001101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\4\Normal\HTA8_6011_001101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\5\Normal\HTA8_6013_001101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\6\Normal\HTA8_6016_001101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\7\Normal\HTA8_6023_001101_barcodes.csv",
    #
    #r"D:\UKW\DataSets\phs002371.v6.p1\1\Tumour\HTA8_6001_002101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\2\Tumour\HTA8_6002_002101_barcodes.csv",
    r"D:\UKW\DataSets\phs002371.v6.p1\3\Tumour\HTA8_6009_002101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\4\Tumour\HTA8_6011_002101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\5\Tumour\HTA8_6013_002101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\6\Tumour\HTA8_6016_002101_barcodes.csv",
    #r"D:\UKW\DataSets\phs002371.v6.p1\7\Tumour\HTA8_6023_002101_barcodes.csv",
]
adatas = [] # Initialise List
gene_lists = [] # Initialise List of Gene names

#-------------------Loading Matrix----------------------
for i in range(1):
    #adata = sc.read_mtx(matrix_files[i]).transpose() #If needs transposing
    adata = sc.read_mtx(matrix_files[i])
    print(f"Shape of Matrix {i+1} (n_cells, n_genes): {adata.shape}")
    print(f"Matrix {i+1} Loaded Successfully")

    #---------Loading Gene Names and Annotating Genes in Matrix--------
    gene_names = pd.read_csv(genes_files[i], header=None, sep=',', usecols=[1], names=['gene_name'])
    if adata.shape[1] == gene_names.shape[0]:
        adata.var_names = gene_names['gene_name'].values
    else:
        print(f"Warning: Mismatch in number of genes for sample {i+1}")
    adata.var_names_make_unique()
    print("Genes Successfully Annotated")

    # Collect the gene names
    gene_lists.append(set(adata.var_names))

    #---------Loading Cell Barcodes and Annotating Cells in Matrix--------
    cell_barcodes = pd.read_csv(barcodes_files[i], header=None, sep=',')
    #check for duplicates
    if cell_barcodes[0].duplicated().any():
        print(f"Warning: Duplicate barcodes found in sample {i+1}")
    #select only the first n_obs to match the number of cells in adata
    cell_barcodes = cell_barcodes[0].values[:adata.n_obs]

#    adata.obs_names = [f"{barcode}_sample_{i+1}" for barcode in cell_barcodes]
    adata.obs_names = [f"{barcode}" for barcode in cell_barcodes]
    adata.obs_names_make_unique()
    print("Cells Successfully Annotated")

    #----------------------------Adding sample----------------------------
#    adata.obs['sample'] = f'sample_{i+1}'
    adatas.append(adata) #Append the adata to the list
adata
sc.pp.filter_genes(adata, min_cells=1)#Remove genes with 0 counts
adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Adata_Raw")

#-----------------------------------------------------------------
#-----------------------Computing Attributes----------------------
#-----------------------------------------------------------------
# Convert the sparse matrix to memory (fully loaded) before applying the filter
# Ensure the data matrix `adata.X` is converted correctly
print(f"Type of adata.X: {type(adata.X)}")

print(adata.obs.columns)
#adata.obs['sample'] = adata.obs['sample'].astype('category')
adata.var["mt"] = adata.var_names.str.startswith('MT-')
adata.var["ribo"] = adata.var_names.str.startswith(('RPS', 'RPL'))
adata.var["hb"] = adata.var_names.str.contains('HB[^(P)]')
sc.pp.calculate_qc_metrics(
    adata, qc_vars=["mt", "ribo", "hb"], inplace=True, percent_top=[20], log1p=True
)

cell_cycle_genes = {
    'G1/S': ['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MCM4', 'RRM1', 'UNG', 'GINS2', 'MCM6', 'CDCA7', 'DTL', 'PRIM1', 'UHRF1', 'HELLS', 'RFC2', 'RPA2', 'NASP', 'RAD51AP1', 'GMNN', 'WDR76', 'SLBP', 'CCNE2', 'UBR7', 'POLD3', 'MSH2', 'ATAD2', 'RAD51', 'RRM2', 'CDC45', 'CDC6', 'EXO1', 'TIPIN', 'DSCC1', 'BLM', 'CASP8AP2', 'USP1', 'CLSPN', 'POLA1', 'CHAF1B', 'BRIP1', 'E2F8'],
    'G2/M': ['HMGB2', 'CDK1', 'NUSAP1', 'UBE2C', 'BIRC5', 'TPX2', 'TOP2A', 'NDC80', 'CKS2', 'NUF2', 'CKS1B', 'MKI67', 'TMPO', 'CENPF', 'TACC3', 'SMC4', 'CCNB2', 'CKAP2L', 'CKAP2', 'AURKB', 'BUB1', 'KIF11', 'ANP32E', 'TUBB4B', 'GTSE1', 'KIF20B', 'HJURP', 'CDCA3', 'CDC20', 'TTK', 'CDC25C', 'KIF2C', 'RANGAP1', 'NCAPD2', 'DLGAP5', 'CDCA2', 'CDCA8', 'ECT2', 'KIF23', 'HMMR', 'AURKA', 'PSRC1', 'ANLN', 'LBR', 'CKAP5', 'CENPE', 'CTCF', 'NEK2', 'G2E3', 'GAS2L3', 'CBX5', 'CENPA']
}
sc.tl.score_genes_cell_cycle(adata,
                             s_genes=cell_cycle_genes['G1/S'],
                             g2m_genes=cell_cycle_genes['G2/M'],
                             )

sex_genes = ['SRY', 'ZFY', 'TSPY1', 'XIST', 'TSIX', 'KDM5C']
sex_genes_in_data = [gene for gene in sex_genes if gene in adata.var_names]
adata.obs['sex_gene_expression'] = adata[:, sex_genes_in_data].X.sum(axis=1)

adata.var['n_cells'] = (adata.X > 0).sum(axis=0).A1
adata.var['log_n_cells'] = np.log1p(adata.var['n_cells'])
# Create a frequency table
gene_counts = pd.Series(adata.var['n_cells'])
frequency_table = gene_counts.value_counts().sort_index()

#-----------------------------------------------------------------
#1--------------------------Histogramm---------------------------
#-----------------------------------------------------------------
fig, axes = plt.subplots(3, 2, figsize=(10, 15))
#1a How Many Times Do Cells have Certain num Genes
#p1 = sns.displot(adata.obs["log1p_total_counts"], bins=100, kde=False)
sns.histplot(adata.obs["log1p_total_counts"], kde=True, ax=axes[0, 0], bins=100, kde_kws={'bw_adjust': 0.5})
axes[0, 0].set_title("log-transformed Total Counts")
axes[0, 0].set_xlabel("Total Counts")  # Adding axis labels
axes[0, 0].set_ylabel("Frequency")

#1b How Many Times Do Cells have certain num Different Genes
sns.histplot(adata.obs["log1p_n_genes_by_counts"], kde=True, ax=axes[0, 1], bins=100, kde_kws={'bw_adjust': 0.5})
axes[0, 1].set_title("log-transformed Genes by Counts")
axes[0, 1].set_xlabel("log-transformed Genes by Counts)")  # Adding axis labels
axes[0, 1].set_ylabel("Frequency")

#1c
sns.histplot(frequency_table.index.repeat(frequency_table.values), bins=50, binrange=(1, 100), ax=axes[1, 0])  # Limit to the first 100 cells for clarity
axes[1, 0].set_title("Gene Expression Across Cells")
axes[1, 0].set_xlabel("Number of Cells Expressing the Gene")
axes[1, 0].set_ylabel("Number of Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1d
#p2 = sc.pl.violin(adata, "pct_counts_ribo")
sns.violinplot(y=adata.obs["pct_counts_ribo"], ax=axes[1, 1],  width=0.8, density_norm="width", inner=None)  # Limit to the first 100 cells for clarity
sns.stripplot(y=adata.obs["pct_counts_ribo"], ax=axes[1, 1], color="black", jitter=0.1, size=0.5, alpha=0.7)
axes[1, 1].set_title("Percentage of Ribosomal Genes")
axes[1, 1].set_xlabel("Frequency")
axes[1, 1].set_ylabel("Pct Ribosomal Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1e
#p2 = sc.pl.violin(adata, "pct_counts_ribo")
#sns.violinplot(y=adata.obs["pct_counts_hb"], ax=axes[1, 1],  width=0.8, density_norm="width", inner=None)  # Limit to the first 100 cells for clarity
sns.violinplot(y=adata.obs["pct_counts_hb"], ax=axes[2, 0],  width=0.8, inner=None)
sns.stripplot(y=adata.obs["pct_counts_hb"], ax=axes[2, 0], color="black", jitter=0.1, size=0.5, alpha=0.7)
axes[2, 0].set_title("Percentage of Heamoglobin Genes")
axes[2, 0].set_xlabel("Frequency")
axes[2, 0].set_ylabel("Pct Heamoglobin Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1f
#p3 = sc.pl.scatter(adata, "log1p_total_counts", "n_genes_by_counts", color="pct_counts_mt")
sns.scatterplot(x=adata.obs["total_counts"], y=adata.obs["n_genes_by_counts"], hue=adata.obs["pct_counts_mt"], ax=axes[2, 1])  # Limit to the first 100 cells for clarity
axes[2, 1].set_title("Cells according to Number of Genes")
axes[2, 1].set_xlabel("Total Counts")
axes[2, 1].set_ylabel("Number of different Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
print("Plotted 1")
print(f"Type of adata.X: {type(adata.X)}")

#-----------------------------------------------------------------
#-------------------------Outlier Deletion------------------------
#-----------------------------------------------------------------
print(f"Before Prefiltering, Total num of Cells: {adata.n_obs}, Genes: {adata.n_vars}")

def is_outlier(adata, metric: str, nmads: int):
    M = adata.obs[metric]
    mad_value = median_abs_deviation(M)
    outlier = (M < np.median(M) - nmads * median_abs_deviation(M)) | (
            np.median(M) + nmads * median_abs_deviation(M) < M
    )
    print(f"Metric: {metric}, Median: {np.median(M)}, MAD: {mad_value}, Outliers: {outlier.sum()} / {len(M)}")
    return outlier

adata.obs["count_outlier"] = (
        (adata.obs["total_counts"] < 80)
)
print(adata.obs["count_outlier"].value_counts())
print(f"Before Count-Outliers, Total num of Cells: {adata.n_obs}, Genes: {adata.n_vars}")
adata = adata[(~adata.obs.count_outlier)].copy()
print(f"After Count Outliers, Total num of Cells: {adata.n_obs}, Genes: {adata.n_vars}")
#-----------------------------------------------------------------
#1--------------------------Histogramm---------------------------
#-----------------------------------------------------------------
fig, axes = plt.subplots(3, 2, figsize=(10, 15))
#1a How Many Times Do Cells have Certain num Genes
#p1 = sns.displot(adata.obs["log1p_total_counts"], bins=100, kde=False)
sns.histplot(adata.obs["log1p_total_counts"], kde=True, ax=axes[0, 0], bins=100, kde_kws={'bw_adjust': 0.5})
axes[0, 0].set_title("log-transformed Total Counts")
axes[0, 0].set_xlabel("Total Counts")  # Adding axis labels
axes[0, 0].set_ylabel("Frequency")

#1b How Many Times Do Cells have certain num Different Genes
sns.histplot(adata.obs["log1p_n_genes_by_counts"], kde=True, ax=axes[0, 1], bins=100, kde_kws={'bw_adjust': 0.5})
axes[0, 1].set_title("log-transformed Genes by Counts")
axes[0, 1].set_xlabel("log-transformed Genes by Counts)")  # Adding axis labels
axes[0, 1].set_ylabel("Frequency")

#1c
sns.histplot(frequency_table.index.repeat(frequency_table.values), bins=50, binrange=(1, 100), ax=axes[1, 0])  # Limit to the first 100 cells for clarity
axes[1, 0].set_title("Gene Expression Across Cells")
axes[1, 0].set_xlabel("Number of Cells Expressing the Gene")
axes[1, 0].set_ylabel("Number of Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1d
#p2 = sc.pl.violin(adata, "pct_counts_ribo")
sns.violinplot(y=adata.obs["pct_counts_ribo"], ax=axes[1, 1],  width=0.8, density_norm="width", inner=None)  # Limit to the first 100 cells for clarity
sns.stripplot(y=adata.obs["pct_counts_ribo"], ax=axes[1, 1], color="black", jitter=0.1, size=0.5, alpha=0.7)
axes[1, 1].set_title("Percentage of Ribosomal Genes")
axes[1, 1].set_xlabel("Frequency")
axes[1, 1].set_ylabel("Pct Ribosomal Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1e
#p2 = sc.pl.violin(adata, "pct_counts_ribo")
#sns.violinplot(y=adata.obs["pct_counts_hb"], ax=axes[1, 1],  width=0.8, density_norm="width", inner=None)  # Limit to the first 100 cells for clarity
sns.violinplot(y=adata.obs["pct_counts_hb"], ax=axes[2, 0],  width=0.8, inner=None)
sns.stripplot(y=adata.obs["pct_counts_hb"], ax=axes[2, 0], color="black", jitter=0.1, size=0.5, alpha=0.7)
axes[2, 0].set_title("Percentage of Heamoglobin Genes")
axes[2, 0].set_xlabel("Frequency")
axes[2, 0].set_ylabel("Pct Heamoglobin Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1f
#p3 = sc.pl.scatter(adata, "log1p_total_counts", "n_genes_by_counts", color="pct_counts_mt")
sns.scatterplot(x=adata.obs["total_counts"], y=adata.obs["n_genes_by_counts"], hue=adata.obs["pct_counts_mt"], ax=axes[2, 1])  # Limit to the first 100 cells for clarity
axes[2, 1].set_title("Cells according to Number of Genes")
axes[2, 1].set_xlabel("Total Counts")
axes[2, 1].set_ylabel("Number of different Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
print("Plotted 1b")
print(f"Type of adata.X: {type(adata.X)}")

adata.obs["feat_outlier"] = (
        is_outlier(adata, "pct_counts_mt", 3)
        | (adata.obs["pct_counts_mt"] > 20)
        | (adata.obs["pct_counts_ribo"] > 35)
        | (adata.obs["pct_counts_hb"] > 3)
)
print(adata.obs["feat_outlier"].value_counts())
print(f"Before Feature-Outliers, Total num of Cells: {adata.n_obs}, Genes: {adata.n_vars}")
adata = adata[(~adata.obs.feat_outlier)].copy()
print(f"After Feature Outliers, Total num of Cells: {adata.n_obs}, Genes: {adata.n_vars}")

adata.obs["total_counts"] = adata.X.sum(axis=1)  # Recalculate total counts per cell
adata.var["n_genes_by_counts"] = np.asarray((adata.X > 0).sum(axis=0)).flatten()
adata.obs["n_genes"] = np.asarray((adata.X > 0).sum(axis=1)).flatten()
adata.obs["log1p_total_counts"] = np.log1p(adata.obs["total_counts"])
adata.obs["log1p_n_genes_by_counts"] = np.log1p(adata.obs["n_genes_by_counts"])
#-----------------------------------------------------------------
#1--------------------------Histogramm---------------------------
#-----------------------------------------------------------------
fig, axes = plt.subplots(3, 2, figsize=(10, 15))
#1a How Many Times Do Cells have Certain num Genes
#p1 = sns.displot(adata.obs["log1p_total_counts"], bins=100, kde=False)
sns.histplot(adata.obs["log1p_total_counts"], kde=True, ax=axes[0, 0], bins=100, kde_kws={'bw_adjust': 0.5})
axes[0, 0].set_title("log-transformed Total Counts")
axes[0, 0].set_xlabel("log-transformed Total Counts")  # Adding axis labels
axes[0, 0].set_ylabel("Frequency")

#1b How Many Times Do Cells have certain num Different Genes
sns.histplot(adata.obs["log1p_n_genes_by_counts"], kde=True, ax=axes[0, 1], bins=100, kde_kws={'bw_adjust': 0.5})
axes[0, 1].set_title("log-transformed Genes by Counts")
axes[0, 1].set_xlabel("log-transformed Genes by Counts)")  # Adding axis labels
axes[0, 1].set_ylabel("Frequency")

#1c
sns.histplot(frequency_table.index.repeat(frequency_table.values), bins=50, binrange=(1, 100), ax=axes[1, 0])  # Limit to the first 100 cells for clarity
axes[1, 0].set_title("Gene Expression Across Cells")
axes[1, 0].set_xlabel("Number of Cells Expressing the Gene")
axes[1, 0].set_ylabel("Number of Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1d
#p2 = sc.pl.violin(adata, "pct_counts_ribo")
sns.violinplot(y=adata.obs["pct_counts_ribo"], ax=axes[1, 1],  width=0.8, density_norm="width", inner=None)  # Limit to the first 100 cells for clarity
sns.stripplot(y=adata.obs["pct_counts_ribo"], ax=axes[1, 1], color="black", jitter=0.1, size=0.5, alpha=0.7)
axes[1, 1].set_title("Percentage of Ribosomal Genes")
axes[1, 1].set_xlabel("Frequency")
axes[1, 1].set_ylabel("Pct Ribosomal Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1e
#p2 = sc.pl.violin(adata, "pct_counts_ribo")
#sns.violinplot(y=adata.obs["pct_counts_hb"], ax=axes[1, 1],  width=0.8, density_norm="width", inner=None)  # Limit to the first 100 cells for clarity
sns.violinplot(y=adata.obs["pct_counts_hb"], ax=axes[2, 0],  width=0.8, inner=None)
sns.stripplot(y=adata.obs["pct_counts_hb"], ax=axes[2, 0], color="black", jitter=0.1, size=0.5, alpha=0.7)
axes[2, 0].set_title("Percentage of Heamoglobin Genes")
axes[2, 0].set_xlabel("Frequency")
axes[2, 0].set_ylabel("Pct Heamoglobin Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#1f
#p3 = sc.pl.scatter(adata, "log1p_total_counts", "n_genes_by_counts", color="pct_counts_mt")
sns.scatterplot(x=adata.obs["total_counts"], y=adata.obs["n_genes_by_counts"], hue=adata.obs["pct_counts_mt"], ax=axes[2, 1])  # Limit to the first 100 cells for clarity
axes[2, 1].set_title("Cells according to Number of Genes")
axes[2, 1].set_xlabel("Total Counts")
axes[2, 1].set_ylabel("Number of different Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
print("Plotted 1c")
print(f"Type of adata.X: {type(adata.X)}")

adata.obs["outlier"] = (
#        is_outlier(adata, "log1p_total_counts", 6)
        (adata.obs["total_counts"] > 30000)
#        | is_outlier(adata, "pct_counts_in_top_20_genes", 5)
)
print(adata.obs["outlier"].value_counts())
print(f"After Feat_Outlier Deletion, Total num of Cells: {adata.n_obs}, Genes: {adata.n_vars}")
adata = adata[(~adata.obs.outlier)].copy()
print(f"After Outlier Deletion, Total num of Cells: {adata.n_obs}, Genes: {adata.n_vars}")

#-----------------------------------------------------------------
#---------------------------Ambient RNA---------------------------
#-----------------------------------------------------------------
ro.pandas2ri.activate()
anndata2ri.activate()
ro.r('library(SoupX)')
ro.r('library(Matrix)')

adata_pp = adata.copy()
sc.pp.normalize_per_cell(adata_pp)
sc.pp.log1p(adata_pp)
sc.pp.pca(adata_pp)
sc.pp.neighbors(adata_pp)
sc.tl.leiden(adata_pp, key_added="soupx_groups")

# Preprocess variables for SoupX
soupx_groups = adata_pp.obs["soupx_groups"]
ro.globalenv["soupx_groups"] = soupx_groups
del adata_pp

ro.globalenv["cells"] = adata.obs_names
ro.globalenv["genes"] = adata.var_names
ro.globalenv["data"] = adata.X.T

adata_raw = sc.read_h5ad(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Adata_Raw")
ro.globalenv["data_tod"] = adata_raw.X.T
del adata_raw

ro.r('''
#%%R -i data -i data_tod -i genes -i cells -i soupx_groups -o out
print(dim(data)) # Should be (genes x cells)
print(dim(data_tod)) # Should be (genes x cells)
print(sum(data)) # Should be > 0
print(sum(data_tod)) # Should be > 0

# specify row and column names of data
rownames(data) <- genes
colnames(data) <- cells
# ensure correct sparse format for table of counts and table of droplets
data <- as(data, "sparseMatrix")
data_tod <- as(data_tod, "sparseMatrix")

# Generate SoupChannel Object for SoupX 
sc <- SoupChannel(data_tod, data, calcSoupProfile = FALSE)

# Add extra meta data to the SoupChannel object
soupProf = data.frame(row.names = rownames(data), est = rowSums(data)/sum(data), counts = rowSums(data))
sc <- setSoupProfile(sc, soupProf)
print(head(soupProf))

print(colnames(data)[1:10])  # First 10 column names
print(names(soupx_groups)[1:10])  # First 10 soupx_groups names
# Set cluster information in SoupChannel
soupx_groups <- as.character(soupx_groups)
sc <- setClusters(sc, soupx_groups)

# Estimate contamination fraction
print(head(soupx_groups))
print(length(soupx_groups))
print(ncol(data)) # Must match length(soupx_groups)
#print(sc$soupProfile)
sc  <- autoEstCont(sc, doPlot=FALSE)
#print(sc)
#summary(sc$fit)
print(sc$fit$rho)
# Infer corrected table of counts and rount to integer
out <- adjustCounts(sc, roundToInt = TRUE)
''')
print("back again")

out = ro.globalenv["out"]
adata.layers["counts"] = adata.X
adata.layers["soupX_counts"] = out.T
adata.X = adata.layers["soupX_counts"]

print(f"Initial dataset shape: {adata.shape}")
sc.pp.filter_genes(adata, min_cells=20)  #Min 20 cells - filters out 0 count genes
print(f"After last Filter, num Cells: {adata.n_obs}, Genes: {adata.n_vars}")

#-----------------------------------------------------------------
#2---------------------------Histogramm--------------------------
#-----------------------------------------------------------------
gene_counts = pd.Series(adata.var['n_cells'])
frequency_table = gene_counts.value_counts().sort_index()
adata.obs["total_counts"] = adata.X.sum(axis=1)  # Recalculate total counts per cell
adata.var["n_genes_by_counts"] = np.asarray((adata.X > 0).sum(axis=0)).flatten()
adata.obs["n_genes"] = np.asarray((adata.X > 0).sum(axis=1)).flatten()
adata.obs["log1p_total_counts"] = np.log1p(adata.obs["total_counts"])
adata.obs["log1p_n_genes_by_counts"] = np.log1p(adata.obs["n_genes_by_counts"])

fig, axes = plt.subplots(3, 2, figsize=(10, 15))
#2a How Many Times Do Cells have Certain num Genes
#p1 = sns.displot(adata.obs["log1p_total_counts"], bins=100, kde=False)
sns.histplot(adata.obs["log1p_total_counts"], kde=True, ax=axes[0, 0], bins=100, kde_kws={'bw_adjust': 0.5})
axes[0, 0].set_title("log-transformed Total Counts")
axes[0, 0].set_xlabel("log-transformed Total Counts")  # Adding axis labels
axes[0, 0].set_ylabel("Frequency")

#2b How Many Times Do Cells have certain num Different Genes
sns.histplot(adata.obs["n_genes_by_counts"], kde=True, ax=axes[0, 1], bins=100, kde_kws={'bw_adjust': 0.5})
axes[0, 1].set_title("Genes by Counts")
axes[0, 1].set_xlabel("Genes by Counts")  # Adding axis labels
axes[0, 1].set_ylabel("Frequency")

#2c
sns.histplot(frequency_table.index.repeat(frequency_table.values), bins=50, binrange=(1, 100), ax=axes[1, 0])  # Limit to the first 100 cells for clarity
axes[1, 0].set_title("Gene Expression Across Cells")
axes[1, 0].set_xlabel("Number of Cells Expressing the Gene")
axes[1, 0].set_ylabel("Number of Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#2d
#p2 = sc.pl.violin(adata, "pct_counts_ribo")
sns.violinplot(y=adata.obs["pct_counts_ribo"], ax=axes[1, 1],  width=0.8, density_norm="width", inner=None)  # Limit to the first 100 cells for clarity
sns.stripplot(y=adata.obs["pct_counts_ribo"], ax=axes[1, 1], color="black", jitter=0.1, size=0.5, alpha=0.7)
axes[1, 1].set_title("Percentage of Ribosomal Genes")
axes[1, 1].set_xlabel("Frequency")
axes[1, 1].set_ylabel("Pct Ribosomal Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#2e
#p2 = sc.pl.violin(adata, "pct_counts_ribo")
sns.violinplot(y=adata.obs["pct_counts_hb"], ax=axes[2, 0],  width=0.8, density_norm="width", inner=None)  # Limit to the first 100 cells for clarity
sns.stripplot(y=adata.obs["pct_counts_hb"], ax=axes[2, 0], color="black", jitter=0.1, size=0.5, alpha=0.7)
axes[2, 0].set_title("Percentage of Heamoglobin Genes")
axes[2, 0].set_xlabel("Frequency")
axes[2, 0].set_ylabel("Pct Heamoglobin Genes")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

#2f
#p3 = sc.pl.scatter(adata, "log1p_total_counts", "n_genes_by_counts", color="pct_counts_mt")
sns.scatterplot(x=adata.obs["total_counts"], y=adata.obs["n_genes_by_counts"], hue=adata.obs["pct_counts_mt"], ax=axes[2, 1])  # Limit to the first 100 cells for clarity
axes[2, 1].set_title("Cells according to Number of Genes")
axes[2, 1].set_xlabel("Total Counts")
axes[2, 1].set_ylabel("Number Genes by Count")
#plt.xticks(rotation=90)  # Rotate x-axis labels if needed

plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
print("Plotted 2")

#-----------------------------------------------------------------
#2b----------------------For Trial and Error-----------------------
#-----------------------------------------------------------------
fig, axes = plt.subplots(1, 2, figsize=(10, 5))
#3a How Many Times Do Cells have Certain num Genes
#p1 = sns.displot(adata.obs["log1p_total_counts"], bins=100, kde=False)
sns.histplot(adata.obs["total_counts"], kde=False, ax=axes[0], bins=100)
axes[0].set_title("Total Counts")
axes[0].set_xlabel("Total Counts")  # Adding axis labels
axes[0].set_ylabel("Frequency")

#3b How Many Times Do Cells have certain num Different Genes
sns.histplot(adata.obs["log1p_total_counts"], kde=False, ax=axes[1], bins=100)
axes[1].set_title("Log-transforemd Total Counts")
axes[1].set_xlabel("Log-Transformed Total Counts")  # Adding axis labels
axes[1].set_ylabel("Frequency")

plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
print("Plotted 2b")
#-----------------------------------------------------------------
#-------------------------Doublet Detection-----------------------
#-----------------------------------------------------------------
ro.r('library(Seurat)')
ro.r('library(scater)')
ro.r('library(scDblFinder)')
ro.r('library(BiocParallel)')
ro.r('library(SingleCellExperiment)')
print("Doublet Libraries")
rpy2.robjects.numpy2ri.activate()
# Load R Matrix package for sparse matrices
Matrix = importr("Matrix")

# Ensure the matrix is in CSC format (column-compressed)
if not isinstance(adata.X.T, csc_matrix):
    data_mat = csc_matrix(adata.X.T)
else:
    data_mat = adata.X.T

# Convert to COO format (needed for R sparse conversion)
coo = data_mat.tocoo()

# Convert to R sparse dgCMatrix
data_mat_r = Matrix.sparseMatrix(
    i=ro.IntVector(coo.row + 1),  # R uses 1-based indexing
    j=ro.IntVector(coo.col + 1),
    x=ro.FloatVector(coo.data),
    dims=ro.IntVector(coo.shape)
)
# Assign to R environment
ro.globalenv["data_mat"] = data_mat_r

ro.r('''
set.seed(123)
sce <- scDblFinder(
    SingleCellExperiment(
        list(counts=data_mat),
    ) 
)
doublet_score = sce$scDblFinder.score
doublet_class = sce$scDblFinder.class
''')
doublet_score=ro.globalenv["doublet_score"]
doublet_class=ro.globalenv["doublet_class"]

adata.obs["scDblFinder_score"] = doublet_score
adata.obs["scDblFinder_class"] = doublet_class
adata.obs.scDblFinder_class.value_counts()
print("Assigned Doublet Scores")
adata = adata[adata.obs["scDblFinder_class"] == "singlet"].copy()

#-----------------------------------------------------------------
#3---------------------------Normalisation------------------------
#-----------------------------------------------------------------
#normalise and log-transform
scales_counts = sc.pp.normalize_total(adata, target_sum=None, inplace=False)
adata.layers["log1p_norm"] = sc.pp.log1p(scales_counts["X"], copy=True)

adata.obs['total_counts'] = adata.X.sum(axis=1)  # Recalculate total counts per cell
adata.var['n_genes_by_counts'] = np.asarray((adata.X > 0).sum(axis=0)).flatten()
adata.obs['n_genes'] = np.asarray((adata.X > 0).sum(axis=1)).flatten()

adata.obs["log1p_total_counts"] = np.log1p(adata.obs["total_counts"])
adata.obs["log1p_n_genes_by_counts"] = np.log1p(adata.obs["n_genes_by_counts"])

fig, axes = plt.subplots(1, 2, figsize=(10, 5))
#3a How Many Times Do Cells have Certain num Genes
#p1 = sns.displot(adata.obs["log1p_total_counts"], bins=100, kde=False)
sns.histplot(adata.obs["total_counts"], kde=False, ax=axes[0], bins=100)
axes[0].set_title("Total Counts")
axes[0].set_xlabel("Total Counts")  # Adding axis labels
axes[0].set_ylabel("Frequency")

#3b How Many Times Do Cells have certain num Different Genes
sns.histplot(adata.layers["log1p_norm"].sum(1), kde=False, ax=axes[1], bins=100)
axes[1].set_title("Shifted logarithm")
axes[1].set_xlabel("Normalised Log-transformed Total Counts")  # Adding axis labels
axes[1].set_ylabel("Frequency")

#fig, axes = plt.subplots(1, 2, figsize=(10, 5))
#p1 = sns.histplot(adata.obs["log1p_total_counts"], bins=100, kde=False, ax=axes[0])
#axes[0].set_title("log-transformed Total counts")
#p2 = sns.histplot(adata.layers["log1p_norm"].sum(1), bins=100, kde=False, ax=axes[1])
#axes[1].set_title("Shifted logarithm")
plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
print("Plotted 3")

#-----------------------------------------------------------------
#4-------------------------Scran-Normalisation--------------------
#-----------------------------------------------------------------
from scipy.sparse import csr_matrix
ro.r('library(scran)')

# Preliminary clustering for differentiated normalisation
adata_pp = adata.copy()
sc.pp.normalize_total(adata_pp)
sc.pp.log1p(adata_pp)
sc.pp.pca(adata_pp, n_comps=15)
sc.pp.neighbors(adata_pp)
sc.tl.leiden(adata_pp, key_added="groups")
data_mat = adata_pp.X.T
# convert to CSC if possible. See https://github.com/MarioniLab/scran/issues/70
# Activate NumPy conversion for rpy2
rpy2.robjects.numpy2ri.activate()

Matrix = importr("Matrix")
if not isinstance(data_mat, csc_matrix):
    data_mat = data_mat.tocsc()
# Convert to COO format (easier for row/column indexing)
coo = data_mat.tocoo()
# Pass to R as dgCMatrix
data_mat_r = Matrix.sparseMatrix(
    i=ro.IntVector(coo.row + 1),  # R uses 1-based indexing
    j=ro.IntVector(coo.col + 1),
    x=ro.FloatVector(coo.data),
    dims=ro.IntVector(coo.shape)
)
ro.globalenv["data_mat"] = data_mat_r
ro.globalenv["input_groups"] = ro.StrVector(adata_pp.obs["groups"].tolist())
del adata_pp

ro.r('''
# Ensure input_groups is a factor
input_groups <- as.factor(input_groups)

# Compute size factors
size_factors <- sizeFactors(
    computeSumFactors(
        SingleCellExperiment(
            list(counts=data_mat)), 
            clusters = input_groups,
            min.mean = 0.1,
            BPPARAM = MulticoreParam()
    )
)
''')
size_factors=ro.globalenv["size_factors"]
adata.obs["size_factors"] = size_factors
scran = adata.X / adata.obs["size_factors"].values[:, None]
adata.layers["scran_normalization"] = csr_matrix(sc.pp.log1p(scran))

#fig, axes = plt.subplots(1, 2, figsize=(10, 5))
#p1 = sns.histplot(adata.obs["total_counts"], bins=100, kde=False, ax=axes[0])
#axes[0].set_title("Total counts")
#p2 = sns.histplot(
#    adata.layers["scran_normalization"].sum(1), bins=100, kde=False, ax=axes[1]
#)
#axes[1].set_title("log1p with Scran estimated size factors")
#plt.show()

adata.obs['total_counts'] = adata.X.sum(axis=1)  # Recalculate total counts per cell
adata.var['n_genes_by_counts'] = np.asarray((adata.X > 0).sum(axis=0)).flatten()
adata.obs['n_genes'] = np.asarray((adata.X > 0).sum(axis=1)).flatten()

adata.obs["log1p_total_counts"] = np.log1p(adata.obs["total_counts"])
adata.obs["log1p_n_genes_by_counts"] = np.log1p(adata.obs["n_genes_by_counts"])

fig, axes = plt.subplots(1, 2, figsize=(10, 5))
#4a How Many Times Do Cells have Certain num Genes
#p1 = sns.displot(adata.obs["log1p_total_counts"], bins=100, kde=False)
sns.histplot(adata.obs["total_counts"], kde=False, ax=axes[0], bins=100)
axes[0].set_title("Total Counts")
axes[0].set_xlabel("Total Counts")  # Adding axis labels
axes[0].set_ylabel("Frequency")

#4b How Many Times Do Cells have certain num Different Genes
sns.histplot(adata.layers["scran_normalization"].sum(1), kde=False, ax=axes[1], bins=100)
axes[1].set_title("log1p with Scran estimated size factors")
axes[1].set_xlabel("Scran-Normalised Total Counts")  # Adding axis labels
axes[1].set_ylabel("Frequency")
plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
print("Plotted 4")

#-----------------------------------------------------------------
#5-------------------Analyse Pearson Residuals---------------------
#-----------------------------------------------------------------
analytic_pearson = sc.experimental.pp.normalize_pearson_residuals(adata, inplace=False)
adata.layers["analytic_pearson_residuals"] = csr_matrix(analytic_pearson["X"])

#fig, axes = plt.subplots(1, 2, figsize=(10, 5))
#p1 = sns.histplot(adata.obs["total_counts"], bins=100, kde=False, ax=axes[0])
#axes[0].set_title("Total counts")
#p2 = sns.histplot(
#    adata.layers["analytic_pearson_residuals"].sum(1), bins=100, kde=False, ax=axes[1]
#)
#axes[1].set_title("Analytic Pearson residuals")
#plt.show()

adata.obs['total_counts'] = adata.X.sum(axis=1)  # Recalculate total counts per cell
adata.var['n_genes_by_counts'] = np.asarray((adata.X > 0).sum(axis=0)).flatten()
adata.obs['n_genes'] = np.asarray((adata.X > 0).sum(axis=1)).flatten()

adata.obs["log1p_total_counts"] = np.log1p(adata.obs["total_counts"])
adata.obs["log1p_n_genes_by_counts"] = np.log1p(adata.obs["n_genes_by_counts"])

fig, axes = plt.subplots(1, 2, figsize=(10, 5))
#5a How Many Times Do Cells have Certain num Genes
#p1 = sns.displot(adata.obs["log1p_total_counts"], bins=100, kde=False)
sns.histplot(adata.obs["total_counts"], kde=False, ax=axes[0], bins=100)
axes[0].set_title("Total Counts")
axes[0].set_xlabel("Total Counts")  # Adding axis labels
axes[0].set_ylabel("Frequency")

#5b How Many Times Do Cells have certain num Different Genes
sns.histplot(adata.layers["analytic_pearson_residuals"].sum(1), kde=False, ax=axes[1], bins=100)
axes[1].set_title("Analytic Pearson Residuals")
axes[1].set_xlabel("Analytic Pearson Resiudals")
axes[1].set_ylabel("Frequency")
plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
print("Plotted 5")

#-----------------------------------------------------------------
#5------------------------Feature Selection-----------------------
#-----------------------------------------------------------------
ro.pandas2ri.activate()
anndata2ri.activate()
ro.r('library(scry)')

ro.globalenv["adata"] = adata
ro.r('''
sce = devianceFeatureSelection(adata, assay="X")
''')
binomial_deviance = ro.r("rowData(sce)$binomial_deviance").T

idx = binomial_deviance.argsort()[-4000:]
mask = np.zeros(adata.var_names.shape, dtype=bool)
mask[idx] = True

adata.var["highly_deviant"] = mask
adata.var["binomial_deviance"] = binomial_deviance

sc.pp.highly_variable_genes(adata, layer="scran_normalization")

ax = sns.scatterplot(
    data=adata.var, x="means", y="dispersions", hue="highly_deviant", s=5
)
ax.set_xlim(None, 1.5)
#ax.set_ylim(None, 3)
plt.show()
print("Features")

#-----------------------------------------------------------------
#--------------------------------PCA------------------------------
#-----------------------------------------------------------------
adata.X = adata.layers["log1p_norm"]

# setting highly variable as highly deviant to use scanpy 'use_highly_variable' argument in sc.pp.pca
adata.var["highly_variable"] = adata.var["highly_deviant"]
sc.pp.pca(adata, svd_solver="arpack", use_highly_variable=True)
sc.pl.pca_scatter(adata, color="total_counts")

adata.X = adata.layers["scran_normalization"]
adata.var["highly_variable"] = adata.var["highly_deviant"]
sc.tl.pca(adata, n_comps=50, use_highly_variable=True)


#-----------------------------------------------------------------
#------------------------------t-SNE------------------------------
#-----------------------------------------------------------------
sc.tl.tsne(adata, use_rep="X_pca")
sc.pl.tsne(adata, color="total_counts")

#-----------------------------------------------------------------
#------------------------------UMAPs------------------------------
#-----------------------------------------------------------------
sc.pp.neighbors(adata, n_pcs=30)
sc.tl.umap(adata)

sc.pl.umap(adata, color="total_counts")

sc.pl.umap(
    adata,
    color=["total_counts", "pct_counts_mt", "scDblFinder_score", "scDblFinder_class"],
)


#-----------------------------------------------------------------
#-----------------------------Regression--------------------------
#-----------------------------------------------------------------
#adata = adata[adata.X.sum(axis=1) > 0].copy() #out cells with 0 gene expression
#sc.pp.regress_out(adata, keys=['total_counts', 'n_genes_by_counts'])
#print(f"After Regression. Cells: {adata.n_obs}, Genes: {adata.n_vars}")
#print(adata.obs['total_counts'].mean())

#-----------------------------------------------------------------
#---------------------------Save Progress-------------------------
#-----------------------------------------------------------------
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat1NorPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat2NorPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat3NorPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat4NorPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat5NorPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat6NorPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat7NorPP0_data.h5ad")

#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat1TumPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat2TumPP0_data.h5ad")
adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat3TumPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat4TumPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat5TumPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat6TumPP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\Pat7TumPP0_data.h5ad")

#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\mat1PP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\mat2PP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\mat3PP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\mat4PP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\mat5PP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\mat6PP0_data.h5ad")
#adata.write(r"C:\Users\Gretzmache_N\IdeaProjects\SCRNAseq\src\mat7PP0_data.h5ad")
#adata.write("7_Tum_PP")
#adata.write("7_Nor_PP")
#adata.write("14_PP")
print("PP0 done")
