import celltypist
import scanpy as sc
import numpy as np

import pandas as pd
from celltypist import models

input_file = "C:\\Users\\Gretzmache_N\\IdeaProjects\\SCRNAseq\\src\\Clustering.h5ad"
adata = sc.read_h5ad(input_file)

adata_celltypist = adata.copy()  # make a copy of our adata
adata_celltypist.X = adata.layers["counts"]  # set adata.X to raw counts
sc.pp.normalize_per_cell(
    adata_celltypist, counts_per_cell_after=10**4
)  # normalize to 10,000 counts per cell
#sc.pp.log1p(adata_celltypist)  # log-transform
# make .X dense instead of sparse, for compatibility with celltypist:
if not isinstance(adata_celltypist.X, np.ndarray):  # Check if X is sparse
    adata_celltypist.X = adata_celltypist.X.toarray()

#Download all the available models.
models.download_models(
    force_update=True, model=["Human_Colorectal_Cancer.pkl", "Cells_Intestinal_Tract.pkl"]
)

# Load the AnnData object
model_CRC = models.Model.load(model="Human_Colorectal_Cancer.pkl")
model_GI = models.Model.load(model="Cells_Intestinal_Tract.pkl")
model_CRC.cell_types
model_GI.cell_types

prediction_CRC = celltypist.annotate(
    adata_celltypist, model=model_CRC, majority_voting=True)
prediction_CRC_adata = prediction_CRC.to_adata()

adata.obs["celltypist_cell_label_CRC"] = prediction_CRC_adata.obs.loc[
    adata.obs.index, "majority_voting"
]
adata.obs["celltypist_conf_score_CRC"] = prediction_CRC_adata.obs.loc[
    adata.obs.index, "conf_score"
]

prediction_GI = celltypist.annotate(
    adata_celltypist, model=model_GI, majority_voting=True)
prediction_GI_adata = prediction_GI.to_adata()

adata.obs["celltypist_cell_label_GI"] = prediction_GI_adata.obs.loc[
    adata.obs.index, "majority_voting"
]
adata.obs["celltypist_conf_score_GI"] = prediction_GI_adata.obs.loc[
    adata.obs.index, "conf_score"
]

#Examine the correspondence between CellTypist predictions (`use_as_prediction`) and manual annotations (`use_as_reference`).
#Here, `predicted_labels` from `predictions.predicted_labels` is used as the prediction result from CellTypist.
#`use_as_prediction` can be also set as `majority_voting` (see `1.7.`).
#celltypist.dotplot(prediction_CRC, use_as_reference = 'leiden', use_as_prediction = 'predicted_labels')

sc.pl.umap(
    adata,
    color=["celltypist_cell_label_CRC", "celltypist_conf_score_CRC"],
    frameon=False,
    sort_order=False,
    wspace=1,
)
sc.pl.dendrogram(adata, groupby="celltypist_cell_label_CRC")

#Examine the correspondence between CellTypist predictions (`use_as_prediction`) and manual annotations (`use_as_reference`).
#Here, `predicted_labels` from `predictions.predicted_labels` is used as the prediction result from CellTypist.
#`use_as_prediction` can be also set as `majority_voting` (see `1.7.`).
#celltypist.dotplot(prediction_GI, use_as_reference = 'leiden', use_as_prediction = 'predicted_labels')

sc.pl.umap(
    adata,
    color=["celltypist_cell_label_GI", "celltypist_conf_score_GI"],
    frameon=False,
    sort_order=False,
    wspace=1,
)

sc.pl.dendrogram(adata, groupby="celltypist_cell_label_GI")

#Examine the prediction results.
#predictions.predicted_labels
##Examine the matrix representing the decision score of each cell belonging to a given cell type.
#predictions.decision_matrix
#Examine the matrix representing the probability each cell belongs to a given cell type (transformed from decision matrix by the sigmoid function).
#predictions.probability_matrix

#Query cell will get the label of 'Unassigned' if it fails to pass the probability cutoff in each cell type.
#Query cell will get multiple label outputs (concatenated by '|') if more than one cell type passes the probability cutoff.
#predictions = celltypist.annotate(input_file, model = 'Immune_All_Low.pkl', mode = 'prob match', p_thres = 0.5)

#Export the three results to csv tables.
#predictions.to_table(folder = '/path/to/a/folder', prefix = '')
#Alternatively, export the three results to a single Excel table (.xlsx).
#predictions.to_table(folder = '/path/to/a/folder', prefix = '', xlsx = True)

#Get an `AnnData` with predicted labels and confidence scores embedded into the observation metadata columns.
#adata = predictions.to_adata(insert_labels = True, insert_conf = True)
#Inspect these columns (`predicted_labels` and `conf_score`).
#adata.obs

#Visualise the predicted cell types overlaid onto the UMAP.
#predictions.to_plots(folder = '/path/to/a/folder', prefix = '')

#Visualise the decision scores and probabilities of each cell type overlaid onto the UMAP as well.
#predictions.to_plots(folder = '/path/to/a/folder', prefix = '', plot_probability = True)
